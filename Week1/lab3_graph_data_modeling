-------------------- creating vertices --------------------------
drop type vertex_type cascade;
CREATE TYPE vertex_type
AS ENUM ('player', 'team', 'game');

DROP TABLE vertices;
CREATE TABLE vertices (
identifier TEXT,
type vertex_type,
properties JSON,
PRIMARY KEY (identifier, type)
);

-------------------- creating edges -----------------------------
DROP TYPE edge_type;
CREATE TYPE edge_type 
AS ENUM ('plays_against', 'shares_team', 'plays_in', 'plays_on');

DROP TABLE edges;
CREATE TABLE edges (
subject_identifier TEXT,
subject_type vertex_type,
object_identifier TEXT,
object_type vertex_type,
edge_type edge_type,
properties JSON,
PRIMARY KEY (subject_identifier, subject_type,
	object_identifier, object_type, edge_type)
);

-------------------------------------------------------------------

SELECT * FROM teams;

SELECT * FROM games;
---------------------------creating the game vertice---------------
INSERT INTO vertices
SELECT 
	game_id AS identifier,
	'game'::vertex_type AS type,
	json_build_object(
	'pts_home', pts_home,
	'pts_away', pts_away,
	'winning_team', CASE 
						WHEN home_team_wins = 1 THEN home_team_id
						ELSE visitor_team_id
					END) AS properties
FROM games;
-------------------------creating the player vertice-------------
INSERT INTO vertices
WITH players_agg AS(
	SELECT 
		player_id AS identifier,
		MAX(player_name) AS player_name,
		COUNT(1) AS number_of_games,
		SUM(pts) AS total_points,
		ARRAY_AGG(DISTINCT team_id) AS teams
	FROM game_details
	GROUP BY player_id
)
SELECT identifier, 'player'::vertex_type,
	json_build_object(
	'player_name', player_name,
	'number_of_games', number_of_games,
	'total_points', total_points,
	'teams', teams
	)
FROM players_agg;
-------------------------creating the team vertice---------------
INSERT INTO vertices
WITH teams_deduped AS (
	SELECT *, ROW_NUMBER() OVER
	(PARTITION BY team_id) AS row_num
	FROM teams
	
)
SELECT 
	team_id AS identifier,
	'team'::vertex_type AS type,
	json_build_object(
	'abbreviation', abbreviation,
	'nickname', nickname,
	'city', city,
	'arena', arena,
	'year_founded', yearfounded
	)
FROM teams_deduped
WHERE row_num = 1;
-----------------------------------------------------------------
--check the vertices
SELECT type,COUNT(*) FROM vertices
GROUP BY type;
---------------------------now edges table----------------------
INSERT INTO edges
WITH deduped AS(
select *, row_number() over (PARTITION BY player_id, game_id) AS row_num
from game_details
),
	filtered AS(
		select * FROM deduped
		where row_num = 1
	 ),
	aggregated AS(
	 select 
			f1.player_id as subject_player_id,
			f2.player_id as object_player_id,
			
		    CASE WHEN f1.team_abbreviation = f2.team_abbreviation
				 THEN 'shares_team'::edge_type
			ELSE 'plays_against'::edge_type
			END as edge_type,
			MAX(f1.player_name) as subject_player_name,
			MAX(f2.player_name) as object_player_name,
			COUNT(1) AS num_games,
			SUM(f1.pts) AS subject_points,
			SUM(f2.pts) AS object_points 
 	    from filtered f1	
		   join filtered f2
			ON f1.game_id = f2.game_id
			AND f1.player_name <> f2.player_name
			WHERE f1.player_id > f2.player_id
		GROUP BY 
			f1.player_id,
			f2.player_id,
			CASE WHEN f1.team_abbreviation = f2.team_abbreviation
				THEN 'shares_team'::edge_type
				ELSE 'plays_against'::edge_type
				END
		)
	SELECT 
		subject_player_id AS subject_identifier,
		'player'::vertex_type AS subject_type,
		object_player_id AS object_identifier,
		'player'::vertex_type AS object_type,
		edge_type AS edge_type,
		json_build_object(
			'num_games', num_games,
			'subject_points', subject_points,
			'object_points', object_points)
from aggregated;

----------------------------------------------------------------
SELECT 
	v.properties->>'player_name',
		MAX(CAST(e.properties->>'pts' AS INTEGER))
 	FROM vertices v 
 	JOIN edges e
 	ON e.subject_identifier = v.identifier
 	AND e.subject_type = v.type
GROUP BY 1
ORDER BY 2 DESC;
----------------------------------------------------------------
select 
	v.properties->>'player_name',
	e.object_identifier,
	CAST(v.properties->>'number_of_games' as REAL)/
	CASE WHEN CAST(v.properties->>'total_points' as REAL) = 0 THEN 1 ELSE
	CAST(v.properties ->>'total_points' as REAL) END,
	e.properties->>'subject_points',
	e.properties->>'num_games'
    from vertices v JOIN edges e
	ON v.identifier = e.subject_identifier
    AND v.type = e.subject_type
WHERE e.object_type = 'player':: vertex_type;

	
