-- actor: The name of the actor.
-- actorid: A unique identifier for each actor.
-- film: The name of the film.
-- year: The year the film was released.
-- votes: The number of votes the film received.
-- rating: The rating of the film.
-- filmid: A unique identifier for each film.
-- The primary key for this dataset is (actor_id, film_id).



select distinct(year) from actor_films
order by year;

-- films struct, quality_class, is_active 
---- films: An array of struct with the following fields:
create type film_struct as (
film text,
votes integer,
rating real,
filmid text
)
DROP TYPE quality_class
create type quality_class as enum('star', 'good', 'average', 'bad')

select * from actor_films
WHERE year = 1972
limit 10;
-------------------------- Actors table ----------------------------
DROP TABLE actors;
CREATE TABLE actors (
actor text,
actorid text,
current_year integer,
films_arr film_struct[],
quality_class quality_class,
is_active BOOLEAN,
PRIMARY KEY (actorid, current_year)
);
------------------------------------------------------------
--Cumulative table generation query: 
WITH last_year AS (
            SELECT *
            FROM actors
            WHERE current_year = 1969
        ),
        current_year AS (
            SELECT actor, actorid, year,
                ARRAY_AGG(ARRAY[ROW(
                    film,
                    votes,
                    rating,
                    filmid
                )::film_struct]) AS films_arr,
				AVG(rating) AS avg_rating
            FROM actor_films
            WHERE year = 1970
            GROUP BY actor, actorid, year
        )
        SELECT 
            COALESCE(c.actor, l.actor) AS actor,
            COALESCE(c.actorid, l.actorid) AS actorid,
            COALESCE(c.year, l.current_year + 1) AS current_year,
            CASE 
                WHEN l.films_arr IS NULL THEN c.films_arr
                WHEN c.films_arr IS NOT NULL THEN l.films_arr || c.films_arr
                ELSE l.films_arr
            END AS films_arr,
			CASE
				WHEN c.avg_rating IS NOT NULL THEN
					CASE 
						WHEN c.avg_rating > 8 THEN 'star'
						WHEN c.avg_rating > 7 THEN 'good'
						WHEN c.avg_rating > 6 THEN 'average'
						ELSE 'bad'
					END::quality_class
				ELSE l.quality_class
			END AS quality_class,
			CASE
				WHEN c.year IS NOT NULL THEN TRUE
				ELSE FALSE
			END AS is_active
        FROM current_year c
        FULL OUTER JOIN last_year l
            ON c.actorid = l.actorid;
------------------------------------------------------------------------------------------------
--Write a query that populates the actors table one year at a time.
--(1970 to 2021)

DO $$
DECLARE
    year_start INT := 1969; -- Starting year
    year_end INT := 2021;   -- Ending year
    loop_year INT;
BEGIN
    FOR loop_year IN year_start..year_end LOOP
        INSERT INTO actors
        WITH last_year AS (
            SELECT *
            FROM actors
            WHERE current_year = loop_year - 1
        ),
        current_year AS (
            SELECT actor, actorid, year,
                ARRAY_AGG(ARRAY[ROW(
                    film,
                    votes,
                    rating,
                    filmid
                )::film_struct]) AS films_arr,
				AVG(rating) AS avg_rating
            FROM actor_films
            WHERE year = loop_year
            GROUP BY actor, actorid, year
        )
        SELECT 
            COALESCE(c.actor, l.actor) AS actor,
            COALESCE(c.actorid, l.actorid) AS actorid,
            COALESCE(c.year, l.current_year + 1) AS current_year,
            CASE 
                WHEN l.films_arr IS NULL THEN c.films_arr
                WHEN c.films_arr IS NOT NULL THEN l.films_arr || c.films_arr
                ELSE l.films_arr
            END AS films_arr,
			CASE
				WHEN c.avg_rating IS NOT NULL THEN
					CASE 
						WHEN c.avg_rating > 8 THEN 'star'
						WHEN c.avg_rating > 7 THEN 'good'
						WHEN c.avg_rating > 6 THEN 'average'
						ELSE 'bad'
					END::quality_class
				ELSE l.quality_class
			END AS quality_class,
			CASE
				WHEN c.year IS NOT NULL THEN TRUE
				ELSE FALSE
			END AS is_active
        FROM current_year c
        FULL OUTER JOIN last_year l
            ON c.actorid = l.actorid;
    END LOOP;
END $$;
----------------------------------------------------------------------------------------------------------

select * from actors
order by current_year desc
limit 100;

---------------------------------actors_history_scd-----------------------------------------
DROP TABLE actors_history_scd;

CREATE TABLE actors_history_scd(
actor TEXT,
actorid TEXT,
quality_class quality_class,
is_active BOOLEAN,
start_date INTEGER,
end_date INTEGER,
current_year INTEGER,
PRIMARY KEY(actorid, start_date)
);
---------------------------------Inserting data using backfiling query-----------------------
INSERT INTO actors_history_scd
WITH with_previous AS(
	SELECT
		actor, actorid, quality_class, is_active,
		LAG(quality_class,1) OVER (PARTITION BY actorid ORDER BY current_year) AS previous_quality_class,
		LAG(is_active,1) OVER (PARTITION BY actorid ORDER BY current_year) AS previous_active_class,
		current_year
	FROM actors
	WHERE current_year <= 2020),
with_indicators AS(
	SELECT *, 
	CASE
		WHEN quality_class <> previous_quality_class THEN 1
		WHEN is_active <> previous_active_class THEN 1
	END AS change_indicator
	FROM with_previous
),
with_streaks AS(
	SELECT *,
	SUM(change_indicator) OVER (PARTITION BY actorid ORDER BY current_year) AS streak_identifier
	FROM with_indicators
)

SELECT actor, actorid,
	quality_class, is_active,
	MIN(current_year) AS start_date,
	MAX(current_year) AS end_date,
	2020 AS current_year
	FROM with_streaks
	GROUP BY actor, actorid, streak_identifier, quality_class, is_active
	ORDER BY actor, streak_identifier;
-----------------------------------------------------------------------------------	
CREATE TYPE scd_type AS (
quality_class quality_class,
is_active BOOLEAN,
start_date INTEGER,
end_date INTEGER
);
--------------------------------------------------------------------------------
WITH last_year_scd AS (
	SELECT * FROM actors_history_scd
	WHERE current_year = 2020
	AND end_date = 2020
),
historical_scd AS (
	SELECT actor, actorid,
		quality_class, is_active,
		start_date,
		end_date
	FROM actors_history_scd
	WHERE current_year = 2020
	AND end_date < 2020
),
this_year_data AS (
	SELECT * FROM actors
	WHERE current_year = 2021
),
unchanged_records AS (
	SELECT ty.actor, ty.actorid,
		ty.quality_class, ty.is_active,
		ly.start_date, ty.current_year AS end_date
	FROM this_year_data ty JOIN last_year_scd ly
	ON ty.actorid = ly.actorid
	WHERE ty.quality_class = ly.quality_class
	AND ty.is_active = ly.is_active
),
changed_records AS(
SELECT ty.actor, ty.actorid,
	UNNEST(ARRAY[
			ROW(
			ly.quality_class,
			ly.is_active,
			ly.start_date,
			ly.end_date
			)::scd_type,
			ROW(
			ty.quality_class,
			ty.is_active,
			ty.current_year,
			ty.current_year
			)::scd_type			
	]) AS records
	FROM this_year_data ty LEFT JOIN last_year_scd ly
	ON ly.actorid = ty.actorid
	WHERE (ty.quality_class <> ly.quality_class
	OR ty.is_active <> ly.is_active)
),
unnested_changed_records AS (
SELECT actor, actorid,
	(records::scd_type).quality_class,
	(records::scd_type).is_active,
	(records::scd_type).start_date,
(	records::scd_type).end_date
FROM changed_records
),
new_records AS (
SELECT ty.actor, ty.actorid,
	ty.quality_class,ty.is_active,
	ty.current_year AS start_date,
	ty.current_year AS end_date
FROM this_year_data ty LEFT JOIN last_year_scd ly
ON ly.actorid = ty.actorid
WHERE ly.actorid IS NULL
)
SELECT * FROM historical_scd
UNION ALL
SELECT * FROM unchanged_records
UNION ALL
SELECT * FROM unnested_changed_records
UNION ALL
SELECT * FROM new_records;
